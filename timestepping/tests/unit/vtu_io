#!/usr/bin/env python

# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import numpy;  numpy.random.seed(0)

from dolfin import *
from timestepping import *

mesh = RectangleMesh(0.0, 0.0, 1.0, 1.0, 10, 10)

for mesh, e in [(UnitIntervalMesh(10), [("CG", 1), ("CG", 2), ("CG", 3), ("DG", 1), ("DG", 2), ("DG", 3)]),
                (UnitSquareMesh(10, 10), [("CG", 1), ("CG", 2), ("DG", 1), ("DG", 2)]),
                (UnitCubeMesh(10, 10, 10), [("CG", 1), ("CG", 2), ("DG", 1), ("DG", 2)])]:
  for args in e:
    space = FunctionSpace(mesh, *args)
    F = Function(space)
    F.vector().set_local(numpy.random.random(F.vector().local_size()))
    F.vector().apply("insert")

    filename = "%iD_P%i_%s" % (mesh.geometry().dim(), args[1], args[0])
    write_vtu(filename, F)

    G = read_vtu(filename, space).values()[0]
    err = (F.vector() - G.vector()).norm("linf")
    print "%iD, P%i_%s: %.17e" % (mesh.geometry().dim(), args[1], args[0], err)
    assert(err == 0.0)
    
    space = MixedFunctionSpace([FunctionSpace(mesh, *args)])
    F = Function(space)
    F.vector().set_local(numpy.random.random(F.vector().local_size()))
    F.vector().apply("insert")

    filename = "%iD_Mixed_P%i_%s" % (mesh.geometry().dim(), args[1], args[0])
    write_vtu(filename, F)
    
    space = FunctionSpace(mesh, *args)
    G = read_vtu(filename, space).values()[0]
    err = (F.vector() - G.vector()).norm("linf")
    print "%iD, [P%i_%s][0]: %.17e" % (mesh.geometry().dim(), args[1], args[0], err)
    assert(err == 0.0)
    
    space = space * space
    F = Function(space)
    F.vector().set_local(numpy.random.random(F.vector().local_size()))
    F.vector().apply("insert")

    filename = "%iD_Mixed_P%i_%s_x_P%i_%s" % (mesh.geometry().dim(), args[1], args[0], args[1], args[0])
    write_vtu(filename, F)
    
    F = F.split(deepcopy = True)
    for G in read_vtu(filename, space.split()[0].collapse()).values():
      i = {"_1":0, "_2":1}[G.name()[-2:]]
      err = (F[i].vector() - G.vector()).norm("linf")
      print "%iD, [P%i_%s, P%i_%s][%i]: %.17e" % (mesh.geometry().dim(), args[1], args[0], args[1], args[0], i, err)
      assert(err == 0.0)
    
    space = VectorFunctionSpace(mesh, *args) 
    F = Function(space)
    F.vector().set_local(numpy.random.random(F.vector().local_size()))
    F.vector().apply("insert")

    filename = "%iD_Vector_P%i_%s" % (mesh.geometry().dim(), args[1], args[0])
    write_vtu(filename, F)
  
    if mesh.geometry().dim() == 1:
      space = FunctionSpace(mesh, *args)
      nF = Function(space)
      nF.vector()[:] = F.vector()
      F = [nF];  del(nF)
    else:
      space = space.split()[0].collapse()
      F = F.split(deepcopy = True)
    for G in read_vtu(filename, space).values():
      i = {("_%i" % (i + 1)):i for i in range(mesh.geometry().dim())}[G.name()[-2:]]
      err = (F[i].vector() - G.vector()).norm("linf")
      print "%iD, vector P%i_%s, component %i: %.17e" % (mesh.geometry().dim(), args[1], args[0], i, err)
      assert(err == 0.0)