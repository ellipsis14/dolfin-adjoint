#!/usr/bin/env python

from dolfin import *
from timestepping import *

# Define a simple structured mesh on the unit interval
mesh = UnitIntervalMesh(10)
# P1 function space
space = FunctionSpace(mesh, "CG", 1)

# Model parameters and boundary conditions
dt = StaticConstant(0.05)
bc1 = StaticDirichletBC(space, 1.0,
  "on_boundary && near(x[0], 0.0)")
bc2 = StaticDirichletBC(space, 0.0,
  "on_boundary && near(x[0], 1.0)")
bcs = [bc1, bc2]
nu = StaticConstant(0.01)

# Define time levels
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
# A time dependent function
u = TimeFunction(levels, space, name = "u")

# Initialise a TimeSystem
system = TimeSystem()

# Add an initial assignment
u_ic = StaticFunction(space, name = "u_ic")
u_ic.assign(Constant(0.0))
bc1.apply(u_ic.vector())
system.add_solve(u_ic, u[0])
# Register a simple diffusion equation, discretised in time
# using forward Euler
test = TestFunction(space)
system.add_solve(
  inner(test, (1.0 / dt) * (u[n + 1] - u[n])) * dx ==
    -nu * inner(grad(test), grad(u[n])) * dx,
  u[n + 1], bcs,
  solver_parameters = {"linear_solver":"lu"})

# Assemble the TimeSystem, enabling the adjoint. Set the
# functional to be equal to spatial integral of the final u.
system = system.assemble(adjoint = True, functional = u[N] * dx)

# Timestep the model
t = 0.0
while t * (1.0 + 1.0e-9) < 1.0:
  system.timestep()
  t += float(dt)
# Finalise
system.finalise()

# Perform a model constrained derivative calculation
dJdm = system.compute_gradient(nu)

# Verify the stored forward model data
system.verify_checkpoints()
# Verify the computed derivative using a Taylor remainder
# convergence test
orders = system.taylor_test(nu, grad = dJdm)
# Check the convergence order
assert((orders > 1.99).all())