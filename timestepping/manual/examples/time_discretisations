#!/usr/bin/env python

# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from dolfin import *
from timestepping import *

mesh = UnitIntervalMesh(10)
space = FunctionSpace(mesh, "CG", 1)
test = TestFunction(space)

T_ic = StaticFunction(space, name = "T_ic")
T_ic.assign(Constant(1.0))
x = StaticFunction(space, name = "x")
x.interpolate(Expression("x[0]"))
def F(test, T):
  return inner(test, x) * dx
dt = StaticConstant(0.5)
solver_parameters = {"linear_solver":"lu"}

def check(name, system, T_f, ns_i = 0, tol = 0.0):
  system = system.assemble()
  system.timestep(ns = 2)
  system.finalise()
  if not isinstance(T_f, dolfin.Function):
    lT_f = Function(space, name = "T_f")
    pa_solve(inner(test, lT_f) * dx == inner(test, T_f) * dx,
      lT_f, solver_parameters = solver_parameters)
    T_f = lT_f
  err = (T_f.vector() - (T_ic.vector() + 0.5 * (ns_i + 2) * x.vector())).norm("linf")
  print "%s: %.17e" % (name, err)
  assert(err < tol)
  return

# First order Adams-Bashforth

levels    = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
levels_dT = TimeLevels(levels = [n], cycle_map = {},
  last_past_level = n - 1)
T  = TimeFunction(levels,    space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, dT[n]) * dx == dt * F(test, T[n]),
  dT[n], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[n]), (1.0, dT[n])),
  T[n + 1])

check("AB1", system, T[N], tol = 3.0e-15)

# Second order Adams-Bashforth

levels    = TimeLevels(levels = [n, n + 1, n + 2],
  cycle_map = {n:n + 1, n + 1:n + 2}, last_past_level = n + 1)
levels_dT = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1},
  last_past_level = n)
T  = TimeFunction(levels,    space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, dT[0]) * dx == dt * F(test, T[0]),
  dT[0], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[0]),
                                   (1.0, dT[0])),
  T[1])

system.add_solve(inner(test, dT[n + 1]) * dx ==
  dt * F(test, T[n + 1]),
  dT[n + 1], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[n + 1]),
                                   (3.0 / 2.0, dT[n + 1]),
                                   (-1.0 / 2.0, dT[n])),
  T[n + 2])

check("AB2", system, T[N + 1], ns_i = 1, tol = 4.0e-15)

# Third order Adams-Bashforth

from fractions import Fraction
hf = Fraction(1, 2)

levels    = TimeLevels(levels = [n, n + hf, n + 1, n + 2, n + 3],
  cycle_map = {n:n + 1, n + 1:n + 2, n + 2:n + 3},
  last_past_level = n + 2)
levels_dT = TimeLevels(levels = [n, n + hf, n + 1, n + 2],
  cycle_map = {n:n + 1, n + 1:n + 2}, last_past_level = n + 1)
T  = TimeFunction(levels,    space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, dT[0]) * dx == dt * F(test, T[0]),
  dT[0], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[0]),
                                   (0.5, dT[0])),
  T[hf])

system.add_solve(inner(test, dT[hf]) * dx == dt * F(test, T[hf]),
  dT[hf], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[0]),
                                   (1.0, dT[hf])),
  T[1])

system.add_solve(inner(test, dT[1]) * dx == dt * F(test, T[1]),
  dT[1], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[1]),
                                   (3.0 / 2.0, dT[1]),
                                   (-1.0 / 2.0, dT[0])),
  T[2])

system.add_solve(inner(test, dT[n + 2]) * dx ==
  dt * F(test, T[n + 2]),
  dT[n + 2], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[n + 2]),
                                   (23.0 / 12.0, dT[n + 2]),
                                   (-4.0 / 3.0, dT[n + 1]),
                                   (5.0 / 12.0, dT[n])),
  T[n + 3])

check("AB3", system, T[N + 2], ns_i = 2, tol = 6.0e-15)

# Leapfrog

levels    = TimeLevels(levels = [n, n + 1, n + 2],
  cycle_map = {n:n + 1, n + 1:n + 2}, last_past_level = n + 1)
levels_dT = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1},
  last_past_level = n)
T  = TimeFunction(levels,    space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, dT[0]) * dx == dt * F(test, T[0]),
  dT[0], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[0]),
                                   (1.0, dT[0])),
  T[1])

system.add_solve(inner(test, dT[n + 1]) * dx ==
  dt * F(test, T[n + 1]),
  dT[n + 1], solver_parameters = solver_parameters)
system.add_solve(LinearCombination((1.0, T[n]),
                                   (2.0, dT[n + 1])),
  T[n + 2])

check("LF", system, T[N + 1], ns_i = 1, tol = 4.0e-15)

# Backward Euler

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, space, name = "T")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, T[n + 1]) * dx ==
  inner(test, T[n]) * dx + dt * F(test, T[n + 1]),
  T[n + 1], solver_parameters = solver_parameters)

check("AM1", system, T[N], tol = 3.0e-15)

# Crank-Nicolson (Implicit trapezium rule)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, space, name = "T")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, T[n + 1]) * dx ==
  inner(test, T[n]) * dx +
  dt * (0.5 * F(test, T[n + 1]) + 0.5 * F(test, T[n])),
  T[n + 1], solver_parameters = solver_parameters)

check("AM2", system, T[N], tol = 3.0e-15)

# Crank-Nicolson (Implicit midpoint rule)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, space, name = "T")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, T[n + 1]) * dx ==
  inner(test, T[n]) * dx +
  dt * F(test, 0.5 * T[n + 1] + 0.5 * T[n]),
  T[n + 1], solver_parameters = solver_parameters)

check("IMR", system, T[N], tol = 3.0e-15)

# Second order explicit Runge-Kutta

from fractions import Fraction
hf = Fraction(1, 2)

levels   = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
levels_F = TimeLevels(levels = [n, n + hf], cycle_map = {},
  last_past_level = n - hf)
T    = TimeFunction(levels,   space, name = "T")
F_s  = TimeFunction(levels_F, space, name = "F_s")

system = TimeSystem()

system.add_solve(T_ic, T[0])

system.add_solve(inner(test, F_s[n]) * dx == F(test, T[n]),
  F_s[n], solver_parameters = solver_parameters)
system.add_solve(inner(test, F_s[n + hf]) * dx ==
  F(test, T[n] + 0.5 * dt * F_s[n]),
  F_s[n + hf], solver_parameters = solver_parameters)
  
system.add_solve(LinearCombination((1.0, T[n]),
                                   (dt, F_s[n + hf])),
  T[n + 1])

check("RK2", system, T[N], tol = 5.0e-16)

# P1_DG

spaces = space * space
tests = TestFunction(spaces)
test1, test2 = split(tests)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, spaces, name = "T")

system = TimeSystem()

system.add_solve(inner(tests, T[0]) * dx == inner(test2, T_ic) * dx,
  T[0], solver_parameters = solver_parameters)

m_11 = m_22 = 1.0 / 3.0
m_12 = m_21 = 1.0 / 6.0
system.add_solve(
  inner(test1, 0.5 * T[n + 1][1] + 0.5 * T[n + 1][0] - T[n][1])*dx +
  inner(test2, 0.5 * T[n + 1][1] - 0.5 * T[n + 1][0]) * dx ==
  dt*(m_11 * F(test1, T[n + 1][0]) + m_12 * F(test1, T[n + 1][1]) +
      m_21 * F(test2, T[n + 1][0]) + m_22 * F(test2, T[n + 1][1])),
  T[n + 1], solver_parameters = solver_parameters)
  
check("P1_DG", system, split(T[n])[1], tol = 1.0e-14)