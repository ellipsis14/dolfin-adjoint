#!/usr/bin/env python

# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from dolfin import *
from timestepping import *

def Plot(T, index):
  from matplotlib.pylab import plot, ylim, savefig, clf
  import numpy
  x = interpolate(Expression("x[0]"), space).vector().array()
  def cmp(a, b):
    if a[0] < b[0]:
      return -1
    elif a[0] == b[0]:
      return 0
    else:
      return 1
  T = T.vector().array()
  pack = [(x[i], T[i]) for i in range(T.shape[0])]
  pack.sort(cmp = cmp)
  x = numpy.array([pack[i][0] for i in range(T.shape[0])])
  T = numpy.array([pack[i][1] for i in range(T.shape[0])])

  plot(x, T, color = "k")
  ylim(-0.2, 1.1)
  savefig("T_%i.png" % index)
  clf()
  
  return

mesh = UnitIntervalMesh(32)
space = FunctionSpace(mesh, "CG", 1)
test, trial = TestFunction(space), TrialFunction(space)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, space, name = "T")

u = StaticFunction(space, name = "u")
u.assign(Constant(1.0))
U = as_vector([u])
kappa = StaticConstant(0.02)
dt = StaticConstant(1.0 / 64.0)

T_bc = StaticDirichletBC(space, 1.0, "on_boundary && fabs(x[0]) < DOLFIN_EPS")

T_ic = StaticFunction(space, name = "T_ic")
T_ic.assign(Constant(0.0))
T_bc.apply(T_ic.vector())

system = TimeSystem()
system.add_solve(inner(test, T[0]) * dx == inner(test, T_ic) * dx,
  T[0], T_bc, solver_parameters = {"linear_solver":"lu"})
T_h = 0.5 * (T[n] + T[n + 1])
test_supg = test + 0.5 * CellSize(mesh) * dot(U, grad(test)) / sqrt(dot(U, U))
system.add_solve((1.0 / dt) * inner(test_supg, T[n + 1] - T[n]) * dx
  + inner(test_supg, dot(U, grad(T_h))) * dx
  == inner(test, kappa * dot(grad(T_h), FacetNormal(mesh))) * ds - inner(grad(test), kappa * grad(T_h)) * dx,
  T[n + 1], T_bc, solver_parameters = {"linear_solver":"lu"})

system = system.assemble(adjoint = True, functional = T[N] * T[N] * dx)

t = 0.0
#index = 0
#Plot(T[0], index)
while t * (1.0 + 1.0e-6) < 1.0:
  system.timestep()
#  index += 1
#  Plot(T[n], index)
  t += float(dt)

system.finalise()

grad = system.compute_gradient(T_ic)

orders = system.taylor_test(T_ic, grad = grad)
assert((orders > 1.99).all())