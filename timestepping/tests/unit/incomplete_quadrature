#!/usr/bin/env python2

# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
This is a simple test for the use of incomplete quadrature with pre-assembly.
A form with multiple terms is constructed, which will be assembled with
incomplete quadrature. The test passes if pre-assembly selects a matching
quadrature rule for all terms, and the same quadrature rule as would be selected
when assembling the whole form.
"""

from dolfin import *
from timestepping import *

import numpy.random as random
random.seed(0)

mesh = UnitSquareMesh(10, 10)
space = FunctionSpace(mesh, "CG", 1)
test, trial = TestFunction(space), TrialFunction(space)

# A function containing random data
u = Function(space, name = "u")
u.vector().set_local(random.random(u.vector().local_size()))
u.vector().apply("insert")

# A function containing random data, declared as static
v = StaticFunction(space, name = "v")
v.vector().set_local(random.random(v.vector().local_size()))
v.vector().apply("insert")

# A linear form with three terms which will be assembled using incomplete
# quadrature
     # Cannot be pre-assembled
L = (inner(test, 1.0 / (u * u)) * dx
     # Can be pre-assembled
   + inner(test, 1.0 / (v * v * v)) * dx
     # Can be converted into a matrix multiply, with the matrix pre-assembled
   + inner(test, (1.0 / (v * v * v * v)) * u) * dx)

# Pre-assembled linear form
La = PALinearForm(L, pre_assembly_parameters = {"term_optimisation":True, "matrix_optimisation":True})
assert(La.n_pre_assembled() == 2)
assert(La.n_non_pre_assembled() == 1)

# Verify that assembling the form and the pre-assembled form gives the same
# answer
comp = La.assemble()
ref = assemble(L)
err = (comp - ref).norm("linf")
print("%.16e" % err)
assert(err < 3.0e-14)

# A bi-linear form with two terms which will be assembled using incomplete
# quadrature
     # Cannot be pre-assembled
L = (inner(test, trial / (u * u)) * dx
     # Can be pre-assembled
   + inner(test, trial / (v * v * v)) * dx)

# Pre-assembled bi-linear form
La = PABilinearForm(L, pre_assembly_parameters = {"term_optimisation":True})
assert(La.n_pre_assembled() == 1)
assert(La.n_non_pre_assembled() == 1)

# Verify that assembling the form and the pre-assembled form gives the same
# answer
comp = La.assemble()
ref = assemble(L)
err = (comp - ref).norm("linf")
print("%.16e" % err)
assert(err < 3.0e-15)