#!/usr/bin/env python2

# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import numpy

from dolfin import *
from timestepping import *

code = EmbeddedCpp(code = "b[0] = a;", a = int, b = long_arr)
b = numpy.empty((1,), numpy.int64)
for i in xrange(-10, 11):
  code.run(a = i, b = b)
  assert(b == i)

code = EmbeddedCpp(code = \
  """
  shared_ptr<GenericVector> F_vec = F->vector();
  
  m[0] = 0.0;
  for(size_t i = 0;i < F_vec->local_size();i++){
    m[0] += F_vec->getitem(i);
  }
  m[0] /= F_vec->local_size();
  """,
  F = dolfin.Function, m = double_arr)
m = numpy.empty((1,), numpy.float64)
mesh = UnitIntervalMesh(10)
space = FunctionSpace(mesh, "CG", 1)
F = Function(space, name = "F")
F.interpolate(Expression("x[0]"))
code.run(F = F, m = m)
comp = m[0]
ref = 0.5
err = abs(comp - ref)
print("%.16e" % comp)
print("%.16e" % ref)
print("%.16e" % err)
assert(err < 1.0e-16)

code = EmbeddedCpp(code = "b[0] = mesh->num_vertices();", b = long_arr, mesh = dolfin.Mesh)
code.run(b = b, mesh = mesh)
assert(b[0] == 11)