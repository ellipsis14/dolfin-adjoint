#!/usr/bin/env python

# Copyright (C) 2007 Kristian B. Oelgaard
# Copyright (C) 2008 Johan Hake
# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2007 Kristian B. Oelgaard from DOLFIN file
# demo/undocumented/dg-poisson/python/demo_dg-poisson.py, bzr trunk 7478
# Code first added: 2013-01-04

# Copyright (C) 2008 Johan Hake from dolfin-adjoint file tests/upwind/upwind.py,
# bzr trunk revision 638
# Code first added: 2012-11-26

from dolfin import *
from timestepping import *

from fractions import Fraction;  f1 = Fraction(1, 3); f2 = Fraction(2, 3)
import numpy
import os

Constant = StaticConstant

# Model parameters
deltax = 0.01                              # Approximate nodal spacing in the
                                           # quasi-uniform mesh
alpha = Constant(15.0)                     # Interior penalty parameter
alpha_s = 4.0 * deltax / (2.0 * numpy.pi)  # Length scale parameter for the
                                           # initial condition Helmholtz
                                           # smoother
C = 0.25                                   # Approximate maximum Courant number

# Determine the model timestep
dt = C * deltax / 0.5
dt = Constant(2.0 * numpy.pi / (int(2.0 * numpy.pi / dt) + 1))

# The model mesh ...
mesh = Mesh(os.path.join(os.path.abspath(os.path.dirname(__file__)), "data", "circle_100.xml.gz"))
nm = FacetNormal(mesh)
h = CellSize(mesh)
# ... and function spaces
space = FunctionSpace(mesh, "DG", 1)
test = TestFunction(space)
space_p1 = FunctionSpace(mesh, "CG", 1)

# A Laplace operator subject to homogeneous Neumann boundary conditions
def laplace(T):
  # Laplace operator based on DOLFIN demo demo_dg-poisson.py. See Oelgaard et
  # al, SIAM J. Sci. Comput., 2008, pp. 849 - 864 and Arnold et al, SIAM J.
  # Numer. Anal., 2002, pp. 1749 - 1779.

  return \
    (
  - inner(grad(test), grad(T)) * dx
  + inner(avg(grad(test)), jump(T, nm)) * dS
  + inner(jump(test, nm), avg(grad(T))) * dS
  - (avg(alpha) / avg(h)) * inner(jump(test, nm), jump(T, nm)) * dS
    )

# Generate a smoothed top hat initial condition
T_ic_unsmoothed = StaticFunction(space, name = "T_ic_unsmoothed")
T_ic_unsmoothed.interpolate(Expression("x[0] > 0.2 && x[0] < 0.4 && x[1] > -0.1 && x[1] < 0.1 ? 1.0 : 0.0"))
T_ic = StaticFunction(space, name = "T_ic")
pa_solve(alpha_s * alpha_s * laplace(T_ic) + inner(test, T_ic_unsmoothed - T_ic) * dx == 0,
  T_ic, solver_parameters = {"linear_solver":"lu"})
T_ic.vector()[:] += interpolate(Expression("exp(-((x[0] + 0.3) * (x[0] + 0.3) + x[1] * x[1]) / (2.0 * 0.05 * 0.05))"), space).vector()

# Solid body rotation
u = StaticFunction(space_p1, name = "u")
u.interpolate(Expression("-x[1]"))
v = StaticFunction(space_p1, name = "v")
v.interpolate(Expression("x[0]"))

# Model time levels and fields
levels = TimeLevels(levels = [n, n + f1, n + f2, n + 1], cycle_map = {n:n + 1})
levels_i = TimeLevels(levels = [n + f1, n + f2, n + 1], cycle_map = {})
levels_dT = TimeLevels(levels = [n, n + f1, n + f2], cycle_map = {}, last_past_level = n - f1)
T_i = TimeFunction(levels_i, space, name = "T_i")
T = TimeFunction(levels, space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

system = TimeSystem()

# Initial condition
system.add_solve(T_ic, T[0])

# Add a solve for a T increment
U = as_vector([u, v])
# DG advection upwinding based on dolfin-adjoint upwind test
Un = 0.5 * (dot(U, nm) + abs(dot(U, nm)))
def add_dT_solve(dT, T):
  system.add_solve(inner(test, dT) * dx == dt * inner(grad(test), U * T) * dx - avg(dt) * inner(jump(test), jump(Un * T)) * dS,
    dT, solver_parameters = {"linear_solver":"lu"})
  return

# Add solves for all T increments
add_dT_solve(dT[n], T[n])
add_dT_solve(dT[n + f1], T[n + f1])
add_dT_solve(dT[n + f2], T[n + f2])

# Third order SSP RK time discretisation. See Kuzmin, JCAM, 2010,
# pp. 3077 - 3085 equations 7 - 9.
system.add_solve(LinearCombination((1.0, T[n]), (1.0, dT[n])), T_i[n + f1])
system.add_solve(LinearCombination((3.0 / 4.0, T[n]), (1.0 / 4.0, T[n + f1]), (1.0 / 4.0, dT[n + f1])), T_i[n + f2])
system.add_solve(LinearCombination((1.0 / 3.0, T[n]), (2.0 / 3.0, T[n + f2]), (2.0 / 3.0, dT[n + f2])), T_i[n + 1])

# Vertex-based limiter. See Kuzmin, JCAM, 2010, pp. 3077 - 3085, equation 19.
class LimiterSolver(AssignmentSolver):
  def __init__(self, T_i, T):
    # This supplies insufficient information for a consistent discrete adjoint
    # to be derived.
    AssignmentSolver.__init__(self, T_i, T)

    cells = mesh.cells()
    ne_list = [[] for i in range(mesh.num_vertices())]
    for i, cell in enumerate(cells):
      for node in cell:
        ne_list[node].append(i)
    ele_list = [set() for i in range(len(cells))]
    for i, cell in enumerate(cells):
      for node in cell:
        for cell2 in ne_list[node]:
          ele_list[i].add(cell2)
    ele_list = [list(ele_list[i]) for i in range(len(ele_list))]

    ele_list_n = 0
    for i in range(len(cells)):
      ele_list_n = max(ele_list_n, len(ele_list[i]))
    ele_list_arr = numpy.empty([len(cells), ele_list_n], dtype = numpy.int)
    ele_list_arr[:] = -1
    for i in range(len(cells)):
      for j in range(len(ele_list[i])):
        ele_list_arr[i, j] = ele_list[i][j]
    
    space_p0 = FunctionSpace(mesh, "DG", 0)
    self.__T_0 = Function(space_p0, name = "T_0")
    self.__T_i = T_i
    self.__T = T
    self.__ele_list = ele_list_arr
    self.__kernel = kernel = CellKernel(mesh,
      initialisation_code = \
        """      
        boost::shared_ptr<GenericVector> T_0_vec = T_0->vector();
        boost::shared_ptr<GenericVector> T_i_vec = T_i->vector();
        boost::shared_ptr<GenericVector> T_vec = T->vector();
        boost::shared_ptr<const FunctionSpace> space_0 = T_0->function_space();
        boost::shared_ptr<const GenericDofMap> dofmap_0 = space_0->dofmap();
        boost::shared_ptr<const FunctionSpace> space = T_i->function_space();
        boost::shared_ptr<const GenericDofMap> dofmap = space->dofmap();
        """,
      kernel_code = \
        """
        double lT_0 = T_0_vec->getitem(dofmap_0->cell_dofs(cell)[0]);
        double T_min = T_0_vec->getitem(dofmap_0->cell_dofs(ele_list[cell * ele_list_n])[0]);
        double T_max = T_min;
        size_t i = 1;
        while(i < ele_list_n && ele_list[cell * ele_list_n + i] >= 0){
          double T_val = T_0_vec->getitem(dofmap_0->cell_dofs(ele_list[cell * ele_list_n + i])[0]);
          T_min = std::min(T_min, T_val);
          T_max = std::max(T_max, T_val);
          i++;
        }

        double alpha = 1.0;
        double T_vals[3];
        std::vector<la_index> cell_dofs = dofmap->cell_dofs(cell);
        for(size_t i = 0; i < 3;i++){
          double T_val = T_vals[i] = T_i_vec->getitem(cell_dofs[i]) - lT_0;
          if(T_val > DOLFIN_EPS){
            alpha = std::min(alpha, (T_max - lT_0) / T_val);
          }else if(T_val < -DOLFIN_EPS){
            alpha = std::min(alpha, (T_min - lT_0) / T_val);
          }
        }
        for(size_t i = 0;i < 3;i++){
          T_vec->setitem(cell_dofs[i], lT_0 + alpha * T_vals[i]);
        }
        """,
      finalisation_code = \
        """
        T_vec->apply("insert");
        """,
      T = dolfin.Function, T_0 = dolfin.Function, T_i = dolfin.Function, \
        ele_list = long_arr, ele_list_n = int
      )

    self.reassemble()
    
    return

  def reassemble(self, *args):
    if len(args) == 0 or self.__T_i in args:
      space_p0 = self.__T_0.function_space()
      test_p0 = TestFunction(space_p0)
      self.__T_0_solver = PAEquationSolver(lumped_mass(space_p0) == inner(test_p0, self.__T_i) * dx,
                                           self.__T_0, solver_parameters = {"linear_solver":"lu"})
    return

  def solve(self):
#    AssignmentSolver.solve(self)
#    return
    
    self.__T_0_solver.solve()

    self.__kernel.run(T = self.__T, T_0 = self.__T_0, T_i = self.__T_i, \
      ele_list = self.__ele_list, ele_list_n = self.__ele_list.shape[1])

    return
system.add_solve(LimiterSolver(T_i[n + f1], T[n + f1]))
system.add_solve(LimiterSolver(T_i[n + f2], T[n + f2]))
system.add_solve(LimiterSolver(T_i[n + 1],  T[n + 1]))

# Simple callback to display the model time
def update(s, cs = None):
  print "Time = %.6f" % (max(s - 1, 0) * float(dt))
  return
system.set_update(update)

# Assemble the model
system = system.assemble()

T_int_0 = assemble(T[0] * dx)

# Run the model
t = 0.0
#s = 0
T_int = assemble(T[n] * dx)
T_range = [], [], []
T_range[0].append(t);  T_range[1].append(T[n].vector().min()); T_range[2].append(T[n].vector().max())
print "T_int, T_int_err, T_min, T_max = %.17e, %.17e, %.17e, %.17e" % (T_int, abs(T_int - T_int_0), T_range[1][-1], T_range[2][-1])
#index = 0
#write_vtu("advection_2d_limiter_rk3", T[n], index = index, t = t)
while t * (1.0 + 1.0e-9) < 2.0 * numpy.pi:
  system.timestep()
  t += float(dt)
#  s += 1
  T_int = assemble(T[n] * dx)
  T_range[0].append(t);  T_range[1].append(T[n].vector().min()); T_range[2].append(T[n].vector().max())
  print "T_int, T_int_err, T_min, T_max = %.17e, %.17e, %.17e, %.17e" % (T_int, abs(T_int - T_int_0), T_range[1][-1], T_range[2][-1])
#  if s % 100 == 0:
#    index += 1
#    write_vtu("advection_2d_limiter_rk3", T[n], index = index, t = t)
system.finalise()
#index += 1
#write_vtu("advection_2d_limiter_rk3", T[n], index = index, t = t)

T_int = assemble(T[N] * dx)
T_int_err = abs(T_int - T_int_0)
T_min = T[n].vector().min()
T_max = T[n].vector().max()
print "T_int, T_int_err, T_min, T_max = %.17e, %.17e, %.17e, %.17e" % (T_int, T_int_err, T_min, T_max)
assert(T_int_err < 7.0e-16)
assert(T_min > -1.3e-14)
assert(T_max < 1.0)

#from matplotlib.pylab import axes, plot, xlabel, ylabel, savefig, clf
#
#plot(T_range[0], T_range[1], color = "k")
#xlabel("Time", fontsize = "x-large")
#ylabel("$\\min{(T)}$", fontsize = "x-large")
#savefig("advection_2d_limiter_rk3_T_min.png", dpi = 288)
#clf()
#
#axes([0.2, 0.1, 0.75, 0.85])
#plot(T_range[0], numpy.array(T_range[2]) - 1.0, color = "k")
#xlabel("Time", fontsize = "x-large")
#ylabel("$\\max{(T)} - 1$", fontsize = "x-large")
#savefig("advection_2d_limiter_rk3_T_max.png", dpi = 288)
#clf()
