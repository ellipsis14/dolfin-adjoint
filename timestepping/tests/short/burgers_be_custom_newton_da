#!/usr/bin/env python2

# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on burgers_newton.py test from dolfin-adjoint
# Code first added: 2012-10-25

from dolfin import *
from dolfin_adjoint_timestepping import *

import numpy

if "reorder_dofs_serial" in parameters:
  parameters["reorder_dofs_serial"] = False

ngrid = 30
nu = StaticConstant(0.0001)
dt = StaticConstant(1.0 / ngrid)
t_end = 0.2

mesh = UnitIntervalMesh(ngrid)
space = FunctionSpace(mesh, "CG", 2)
test, trial = TestFunction(space), TrialFunction(space)

ic = StaticFunction(space, name = "initial_condition")
ic.assign(project(Expression("sin(2.0 * pi * x[0])"), space))

system = TimeSystem()
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
u = TimeFunction(levels, space, name = "u")
system.add_solve(ic, u[0])
class CustomSolver(EquationSolver):
  def __init__(self):
    EquationSolver.__init__(self,
                            eq = (test * (u[n + 1] - u[n]) / dt + test * dot(as_vector([u[n + 1]]), grad(u[n + 1])) + nu * dot(grad(test), grad(u[n + 1]))) * dx == 0,
                            x = u[n + 1],
                            bcs = [StaticDirichletBC(space, 0.0, "on_boundary")])
    return
  def solve(self):
    solve(self.eq(), self.x(), self.bcs())
    return
system.add_solve(CustomSolver())

system = system.assemble(adjoint = True, disk_period = 2)
t = 0.0
while t <= t_end:
  system.timestep()
  t += float(dt)
system.finalise()
parameters["adjoint"]["stop_annotating"] = True

dolfin_adjoint_solution = numpy.array(map(float, """0.00000000e+00   4.83694561e-02   9.27155768e-02   1.34969293e-01
   1.75869947e-01   2.14962160e-01   2.51429316e-01   2.84190573e-01
   3.11875150e-01   3.32720430e-01   3.44371888e-01   3.43502319e-01
   3.25028811e-01   2.80253400e-01   1.91216166e-01   4.80612472e-08
  -1.91216090e-01  -2.80253333e-01  -3.25028747e-01  -3.43502257e-01
  -3.44371828e-01  -3.32720379e-01  -3.11875124e-01  -2.84190599e-01
  -2.51429437e-01  -2.14962395e-01  -1.75870204e-01  -1.34969438e-01
  -9.27159078e-02  -4.83690875e-02   0.00000000e+00   5.54998616e-02
   1.67637755e-01   2.80283601e-01   3.91485929e-01   5.00454306e-01
   6.06508575e-01   7.08950354e-01   8.06992547e-01   8.99691662e-01
   9.85857795e-01   1.06391149e+00   1.13162604e+00   1.18559983e+00
   1.21996630e+00   1.22215196e+00  -1.22215198e+00  -1.21996630e+00
  -1.18559983e+00  -1.13162603e+00  -1.06391147e+00  -9.85857770e-01
  -8.99691640e-01  -8.06992547e-01  -7.08950408e-01  -6.06508723e-01
  -5.00454546e-01  -3.91486151e-01  -2.80283855e-01  -1.67637970e-01
  -5.54995221e-02""".split()))
err = abs(u[N].vector().array() - dolfin_adjoint_solution).max()
print(u[N].vector().array(), err)
assert(err < 5.0e-9)

system.verify_checkpoints()

system.set_functional(u[N] * u[N] * dx)
J = system.compute_functional()
grad = system.compute_gradient([ic, nu])
dolfin_adjoint_grad = numpy.array(map(float, """8.59359080e-06   5.14453733e-03   9.68713610e-03   1.32638543e-02
   1.57235628e-02   1.70566232e-02   1.73441020e-02   1.67252972e-02
   1.53773143e-02   1.35014696e-02   1.13129180e-02   9.03074625e-03
   6.86570286e-03   5.00211808e-03   3.67560789e-03   2.75650761e-10
  -3.67560809e-03  -5.00211830e-03  -6.86570312e-03  -9.03074651e-03
  -1.13129182e-02  -1.35014697e-02  -1.53773143e-02  -1.67252970e-02
  -1.73441016e-02  -1.70566225e-02  -1.57235623e-02  -1.32638577e-02
  -9.68714603e-03  -5.14455779e-03  -8.58899971e-06   5.18311768e-03
   1.49231909e-02   2.30720353e-02   2.91233755e-02   3.29220845e-02
   3.45434921e-02   3.42106907e-02   3.22422844e-02   2.90188878e-02
   2.49597054e-02   2.05030709e-02   1.60857831e-02   1.21149441e-02
   8.91738549e-03   6.08307703e-03  -6.08307731e-03  -8.91738615e-03
  -1.21149448e-02  -1.60857839e-02  -2.05030715e-02  -2.49597060e-02
  -2.90188880e-02  -3.22422844e-02  -3.42106903e-02  -3.45434912e-02
  -3.29220836e-02  -2.91233776e-02  -2.30720507e-02  -1.49232106e-02
  -5.18310857e-03""".split()))
err = abs(grad[0].array() - dolfin_adjoint_grad).max()
print(grad[0].array(), err)
assert(err < 5.0e-11)

orders = system.taylor_test(ic, J = J, grad = grad[0])
assert((orders > 2.0).all())

orders = system.taylor_test(nu, J = J, grad = grad[1])
assert((orders > 1.99).all())

assert(replay_dolfin(forget = False, tol = 0.0, stop = True))

grad_da = compute_gradient(Functional(u[N] * u[N] * dx * dolfin_adjoint.dt[FINISH_TIME]), [Control(ic), Control(nu)])

err = (grad[0] - grad_da[0].vector()).norm("linf")
print("%s %.16e" % (grad_da[0].vector().array(), err))
assert(err < 5.0e-13)

err = abs(float(grad[1]) - float(grad_da[1]))
print("%.16e %.16e" % (grad_da[1], err))
assert(err < 4.0e-11)
