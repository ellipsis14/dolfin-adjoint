#!/usr/bin/env python
#NT 4

# Copyright (C) 2009 Garth N. Wells
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Modified version of demo_cahn-hilliard.py demo from DOLFIN bzr trunk 7436
#
# DOLFIN modification dates:
# First added:  2009-06-20
# Last changed: 2012-11-12

# Copyright (C) 2009 Garth N. Wells from DOLFIN file
# demo/pde/cahn-hilliard/python/demo_cahn-hilliard.py, bzr trunk 7478
# Code first added: 2013-01-30

"""This demo illustrates how to use of DOLFIN for solving the Cahn-Hilliard
equation, which is a time-dependent nonlinear PDE """

from dolfin import *
from timestepping import *

from numpy import random

parameters["num_threads"] = 4

# Class representing the intial conditions
class InitialConditions(Expression):
    def __init__(self):
        random.seed(2 + MPI.process_number())
    def eval(self, values, x):
        values[0] = 0.63 + 0.02*(0.5 - random.random())
        values[1] = 0.0
    def value_shape(self):
        return (2,)

# Model parameters
lmbda  = 1.0e-02  # surface parameter
dt     = 5.0e-06  # time step
theta  = 0.5      # time stepping family, e.g. theta=1 -> backward Euler, theta=0.5 -> Crank-Nicolson

# Create mesh and define function spaces
mesh = UnitSquareMesh(96, 96)
V = FunctionSpace(mesh, "Lagrange", 1)
ME = V*V

# Define trial and test functions
du    = TrialFunction(ME)
q, v  = TestFunctions(ME)

# Define time levels and set up the time system
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
system = TimeSystem()

# Define functions
U  = TimeFunction(levels, ME)
u  = U[n + 1]  # current solution
u0 = U[n]      # solution from previous converged step

# Split mixed functions
dc, dmu = split(du)
c,  mu  = split(u)
c0, mu0 = split(u0)

# Create initial conditions and interpolate
u_ic = StaticFunction(ME)
u_ic.interpolate(InitialConditions())
system.add_solve(u_ic, U[0])

# Compute the chemical potential df/dc
f    = 100*c**2*(1-c)**2
dfdc = derivative(f, c, StaticConstant(1.0))

# mu_(n+theta)
mu_mid = (1.0-theta)*mu0 + theta*mu

# Weak statement of the equations
L0 = c*q*dx - c0*q*dx + dt*dot(grad(mu_mid), grad(q))*dx
L1 = mu*v*dx - dfdc*v*dx - lmbda*dot(grad(c), grad(v))*dx
L = L0 + L1

# Compute directional derivative about u in the direction of du (Jacobian)
a = derivative(L, u, du)

# Create nonlinear problem
system.add_solve(L == 0, u, J = a,
  initial_guess = u0,
  solver_parameters = {"newton_solver":{"convergence_criterion":"incremental", "absolute_tolerance":1.0e-16, "relative_tolerance":1.0e-8, "linear_solver":"lu"}})

system = system.assemble(adjoint = True, disk_period = 10, functional = split(U[N])[0] * split(U[N])[0] * dx)

# Output file
#file = File("output.pvd", "compressed")

# Step in time
t = 0.0
T = 20*dt
while (t < T):
    t += dt
    system.timestep()
#    file << (u.split()[0], t)

system.finalise()

comp = U[N].vector().norm("l2")
ref = 5.64531728147374452e+02
err = abs(ref - comp)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 8.0e-11)

system.verify_checkpoints()

J = system.compute_functional()
g = system.compute_gradient(u_ic)
orders = system.taylor_test(u_ic, ntest = 4, J = J, grad = g, fact = 1.0e-5)
assert((orders > 1.94).all())
