#!/usr/bin/env python

# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Modified version of shallow_water test from dolfin-adjoint bzr trunk 636

import sys

import kelvin_new as kelvin
import sw_lib

from dolfin import *
from timestepping import *

#dolfin.parameters["adjoint"]["record_all"]=True

mesh = UnitSquareMesh(6, 6)
W=sw_lib.p1dgp2(mesh)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
State = TimeFunction(levels, W, name = "State")
state=State[n]

system = TimeSystem()
State_ic = StaticFunction(W, name = "State_ic")
State_ic.interpolate(kelvin.InitialConditions())
system.add_solve(State_ic, State[0])

kelvin.params["basename"]="p1dgp2"
kelvin.params["finish_time"]=kelvin.params["dt"]*10
kelvin.params["finish_time"]=kelvin.params["dt"]*2
kelvin.params["dump_period"]=1

#M, G=sw_lib.construct_shallow_water(W, kelvin.params)
#state = sw_lib.timeloop_theta(M, G, state, kelvin.params)

sw_lib.add_timeloop_solve(system, State, W, kelvin.params)
system = system.assemble(adjoint = True, functional = dot(split(State[N])[0], split(State[N])[0]) * dx)
t = kelvin.params["current_time"]
dt= kelvin.params["dt"]
while (t < kelvin.params["finish_time"]):
  system.timestep()
  t+=dt
system.finalise()

comp = assemble(dot(split(state)[0], split(state)[0]) * dx)
ref = 4.10821370682097189e-05
err = abs(comp - ref)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 2.0e-16)

comp = assemble(split(state)[1] * split(state)[1] * dx)
ref = 8.51321895311346568e-07
err = abs(comp - ref)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 7.0e-15)

system.verify_checkpoints()
orders = system.taylor_test(State_ic, fact = 5.0e-5)
assert((orders > 1.99).all())