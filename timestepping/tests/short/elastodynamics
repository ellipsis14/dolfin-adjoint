#!/usr/bin/env python

# Copyright (C) 2010 Garth N. Wells
# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Modified by Anders Logg 2008-2011
#
# First added:  2010-04-30
# Last changed: 2012-11-12

# Copyright (C) 2010 Garth N. Wells from DOLFIN file
# demo/undocumented/elastodynamics/python/demo_elastodynamics.py, bzr trunk 7478

"""This demo program solves an elastodynamics problem."""

# Modified version of demo_elastodynamics.py demo from DOLFIN bzr trunk 7436

from dolfin import *
from timestepping import *

Constant = StaticConstant

# External load
class Traction(Expression):

    def __init__(self, dt, t, old):
        self.t   = t
        self.dt  = dt
        self.old = old

    def eval(self, values, x):

        # 'Shift' time for n-1 values
        t_tmp = self.t
        if self.old and t > 0.0:
            t_tmp -= self.dt

        cutoff_t = 10.0*1.0/32.0;
        weight = t_tmp/cutoff_t if t_tmp < cutoff_t else 1.0

        values[0] = 1.0*weight
        values[1] = 0.0

    def value_shape(self):
        return (2,)

# Sub domain for clamp at left end
def left(x, on_boundary):
    return x[0] < 0.001 and on_boundary

# Sub domain for rotation at right end
def right(x, on_boundary):
    return x[0] > 0.99 and on_boundary

# Load mesh and define function space
mesh = UnitSquareMesh(32, 32)

# Define function space
space = VectorFunctionSpace(mesh, "CG", 1)

# Test and trial functions
u = TrialFunction(space)
r = TestFunction(space)

E  = 1.0
nu = 0.0
mu    = E / (2.0*(1.0 + nu))
lmbda = E*nu / ((1.0 + nu)*(1.0 - 2.0*nu))

# Mass density andviscous damping coefficient
rho = 1.0
eta = Constant(0.25)

# Time stepping parameters
alpha_m = 0.2
alpha_f = 0.4
beta    = 0.36
gamma   = 0.7
dt      = 1.0/32.0
t       = 0.0
T       = 10*dt

# Some useful factors
factor_m1  = rho*(1.0-alpha_m)/(beta*dt*dt)
factor_m2  = rho*(1.0-alpha_m)/(beta*dt)
factor_m3  = rho*(1.0-alpha_m-2.0*beta)/(2.0*beta)

factor_d1  = eta*(1.0-alpha_f)*gamma/(beta*dt)
factor_d2  = eta*((1.0-alpha_f)*gamma-beta)/beta
factor_d3  = eta*(gamma-2.0*beta)*(1.0-alpha_f)*dt/(2.0*beta)

# External forces (body and applied tractions
f  = Constant((0.0, 0.0))
p  = Traction(dt, t, False)
p0 = Traction(dt, t, True)

# Create mesh function over the cell facets
boundary_subdomains = MeshFunction("size_t", mesh, mesh.topology().dim() - 1)
boundary_subdomains.set_all(0)
force_boundary = AutoSubDomain(right)
force_boundary.mark(boundary_subdomains, 3)

# Define measure for boundary condition integral
dss = ds[boundary_subdomains]

# Stress tensor
def sigma(r):
    return 2.0*mu*sym(grad(r)) + lmbda*tr(sym(grad(r)))*Identity(r.cell().d)
  
# Set up boundary condition at left end
zero = Constant((0.0, 0.0))
bc = StaticDirichletBC(space, zero, left)

# Define time levels and set up the time system
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
system = TimeSystem()

# Create functions
U = TimeFunction(levels, space, name = "u")
V = TimeFunction(levels, space, name = "v")
A = TimeFunction(levels, space, name = "a")

system.add_solve(0.0, U[0])
system.add_solve(0.0, V[0])
system.add_solve(0.0, A[0])
system.add_solve(factor_m1*inner(U[n + 1], r)*dx + factor_d1*inner(U[n + 1], r)*dx
   +(1.0-alpha_f)*inner(sigma(U[n + 1]), grad(r))*dx == factor_m1*inner(r, U[n])*dx + factor_m2*inner(r, V[n])*dx
   + factor_m3*inner(r, A[n])*dx
   + factor_d1*inner(r, U[n])*dx + factor_d2*inner(r, V[n])*dx
   + factor_d3*inner(r, A[n])*dx
   - alpha_f*inner(grad(r), sigma(U[n]))*dx
   + inner(r, f)*dx + (1.0-alpha_f)*inner(r, p)*dss(3) + alpha_f*inner(r, p0)*dss(3),
   U[n + 1], bc, solver_parameters = {"linear_solver":"lu"})
system.add_solve(LinearCombination((1.0/(beta*dt*dt),   U[n + 1]),
                                   (-1.0/(beta*dt*dt),  U[n]),
                                   (-1.0/(beta*dt),     V[n]),
                                   (-(1.0-2.0*beta)/(2.0*beta), A[n])), A[n + 1])
system.add_solve(LinearCombination((dt * (1.0-gamma),           A[n]),
                                   (dt * gamma,                 A[n + 1]),
                                   (1.0,                        V[n])), V[n + 1])

def update_p(s, cs = None):
  t = s * dt
  p.t = t
  p0.t = t
  return
system.set_update(update_p)

system = system.assemble(adjoint = True)

# FIXME: This demo needs some improved commenting

# Time-stepping
#vtk_file = File("elasticity.pvd")
while t <= T:

    t += dt
    print "Time: ", t

    system.timestep()

#    # Save solution to VTK format
#    vtk_file << U[n]

system.finalise()

### Plot solution
#plot(U[N], mode="displacement", interactive=True)

ref = 1.75583029098237819e+00
comp = U[N].vector().norm("l2")
err = abs(ref - comp)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 2.0e-14)

system.set_functional(dot(U[N], U[N]) * dx)
J = system.compute_functional()
g = system.compute_gradient(eta)
orders = system.taylor_test(eta, J = J, grad = g)
assert((orders > 1.99).all())