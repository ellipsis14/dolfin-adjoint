#!/usr/bin/env python2

# Copyright (C) 2011 Simula Research Laboratory and Lyudmyla Vynnytska and Marie
#                    E. Rognes
# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2011 Simula Research Laboratory and Lyudmyla Vynnytska and Marie
# E. Rognes from dolfin-adjoint files
# tests/mantle_convection/mantle_convection.py and
# tests/mantle_convection/paper.py, bzr trunk 573
# Code first added: 2013-02-26

# Modified version of mantle_convection test from dolfin-adjoint bzr trunk 513

__license__  = "GNU LGPL Version 3"

import time
import numpy
import sys

from stokes import *
from composition import *
from temperature import *
from parameters import InitialTemperature, Ra, Rb, rho0, g
from parameters import eta0, b_val, c_val, deltaT

from dolfin import *; import dolfin
from timestepping import *

dolfin.parameters["form_compiler"]["representation"] = "quadrature"

def viscosity(T):
    eta = eta0 * exp(-b_val*T/deltaT + c_val*(1.0 - triangle.x[1])/height )
    return eta

def store(T, w, t):
  if not hasattr(store, "__index"):
    store.__index = 0
#  write_vtu("mantle_convection", [T, w], index = store.__index, t = t)
  store.__index += 1
  return

# Define spatial domain
height = 1.0
length = 2.0
nx = 40
ny = 40
mesh = RectangleMesh(0, 0, length, height, nx, ny)

# Create function spaces
W = stokes_space(mesh)
V = W.sub(0).collapse()
Q = FunctionSpace(mesh, "DG", 1)

print "Number of degrees of freedom:", (W*Q).dim()

# Define boundary conditions for the temperature
top_temperature = StaticDirichletBC(Q, 0.0, "x[1] == %g" % height, method = "geometric")
bottom_temperature = StaticDirichletBC(Q, 1.0, "x[1] == 0.0", method = "geometric")
T_bcs = [bottom_temperature, top_temperature]

# Define boundary conditions for the velocity and pressure u
bottom = StaticDirichletBC(W.sub(0), (0.0, 0.0), "x[1] == 0.0" )
top = StaticDirichletBC(W.sub(0).sub(1), 0.0, "x[1] == %g" % height)
left = StaticDirichletBC(W.sub(0).sub(0), 0.0, "x[0] == 0.0")
right = StaticDirichletBC(W.sub(0).sub(0), 0.0, "x[0] == %g" % length)
ref = StaticDirichletBC(W.sub(1), 0.0, "x[0] < DOLFIN_EPS && x[1] < DOLFIN_EPS", method = "pointwise")
bcs = [bottom, top, left, right, ref]

rho = StaticFunction(Q, name = "rho")
rho.interpolate(rho0)

# Time dependent functions
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, Q, name = "Temperature")
w = TimeFunction(levels, W, name = "VelocityPressure")
T_pr = TimeFunction(levels, Q, name = "TentativeTemperature")
w_pr = TimeFunction(levels, W, name = "TentativeVelocityPressure")

# Initial conditions
system = TimeSystem()
T_ic = StaticFunction(Q, name = "InitialTemperature")
T_ic.interpolate(InitialTemperature(Ra, length))
system.add_solve(T_ic, T[0])
eta = viscosity(T[0])
(a, L, pre) = momentum(W, eta, (Ra*T[0])*g)
system.add_solve(a == L, w[0], bcs=bcs, solver_parameters={"linear_solver":"mumps"})

# Define initial and end time
t = 0.0
finish = 0.005
# Define time step
dt = StaticConstant(3.0e-5)

# Solver for the Stokes systems

# Solve for predicted temperature in terms of previous velocity
(a, L) = energy(Q, dt, split(w[n])[0], T[n])
system.add_solve(a == L, T_pr[n + 1], T_bcs, solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}})

# Solve for predicted flow
eta = viscosity(T_pr[n + 1])
(a, L, precond) = momentum(W, eta, (Ra*T_pr[n + 1])*g)
system.add_solve(a == L, w_pr[n + 1], bcs, solver_parameters={"linear_solver":"mumps"})

# Solve for corrected temperature T in terms of predicted and previous velocity
(a, L) = energy_correction(Q, dt, split(w_pr[n + 1])[0], split(w[n])[0], T[n])
system.add_solve(a == L, T[n + 1], T_bcs, solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}})

# Solve for corrected flow
eta = viscosity(T[n + 1])
(a, L, precond) = momentum(W, eta, (Ra*T[n + 1])*g)
system.add_solve(a == L, w[n + 1], bcs, solver_parameters={"linear_solver":"mumps"})

def update(s, cs = None):
  print "Time = %.5f" % (max(s - 1, 0) * float(dt))
  return
system.set_update(update)

def Nusselt():
    "Definition of Nusselt number, cf Blankenbach et al 1989"

    # Define markers (2) for top boundary, remaining facets are marked
    # by 0
    markers = FacetFunction("size_t", mesh)
    markers.set_all(0)
    top = compile_subdomains("near(x[1], %s)" % height)
    top.mark(markers, 2)
    ds = Measure("ds")[markers]

    # Compute \int_bottom T apriori:
    Nu2 = deltaT*length

    return (ds(2), Nu2)

    # Define nusselt number
    #Nu = - (1.0/Nu2)*grad(T)[1]*ds(2)
    #return Nu
(ds2, Nu2) = Nusselt()
J = -(1.0/Nu2)*grad(T[N])[1]*ds2
system = system.assemble(adjoint = True, functional = J)

# Store initial data
store(T[n], w[n], 0.0)

while (t + float(dt) <= finish):
  system.timestep()
  t += float(dt)

  # Store stuff
  store(T[n], w[n], t)
  
system.finalise()

comp = system.compute_functional()
ref = 1.22249474184962530e+01
err = abs(comp - ref)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 8.0e-12)

dJdm = system.compute_gradient(T_ic, project = True)
#write_vtu("mantle_convection_dJdm[1]", dJdm)

system.verify_checkpoints()
assert(system.compute_functional() == comp)
orders = system.taylor_test(T_ic, grad = dJdm, J = comp, fact = 5.0e-6)
assert((orders > 1.99).all())

comp = dJdm[0].norm("l2")
ref = 2.58833107778007188e+00
err = abs(comp - ref)
print "%.17e" % comp
print "%.17e" % ref
print "%.17e" % err
assert(err < 7.0e-13)
