=== modified file 'tests/mantle_convection/mantle_convection.py'
--- tests/mantle_convection/mantle_convection.py	2013-03-11 15:23:48 +0000
+++ tests/mantle_convection/mantle_convection.py	2013-06-14 13:11:56 +0000
@@ -2,7 +2,7 @@
 __copyright__ = "Copyright (C) 2011 Simula Research Laboratory and %s" % __author__
 __license__  = "GNU LGPL Version 3 or any later version"
 
-# Last changed: 2012-02-14
+# Last changed: 2013-06-14
 
 import time
 import numpy
@@ -22,6 +22,8 @@
 dolfin.parameters["adjoint"]["fussy_replay"] = True
 dolfin.parameters["form_compiler"]["representation"] = "quadrature"
 
+dolfin.parameters["reorder_dofs_serial"] = False
+
 def viscosity(T):
     eta = eta0 * exp(-b_val*T/deltaT + c_val*(1.0 - triangle.x[1])/height )
     return eta
@@ -121,28 +123,50 @@
   (u_pr, p_pr) = split(w_pr)
   (u_, p_) = split(w_)
 
-  # Solver for the Stokes systems
+  # Set up preconditioner and nullspace for the Stokes systems
+  (a_dummy, L_dummy, precond) = momentum(W, 1.0, as_vector((1.0, 1.0)))
+  P, dummy = assemble_system(precond, L_dummy, bcs)
+  constant_pressure = Vector(W.dim())
+  W.sub(1).dofmap().set(constant_pressure, 1.0)
+  constant_pressure *= 1.0/constant_pressure.norm("l2")
+  nullspace = VectorSpaceBasis([constant_pressure])
 
   while (t <= finish and n <= 2):
     #message(t, dt)
 
     # Solve for predicted temperature in terms of previous velocity
     (a, L) = energy(Q, Constant(dt), u_, T_)
-    solve(a == L, T_pr, T_bcs, solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}}, annotate=annotate)
+    solve(a == L, T_pr, T_bcs,
+          solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}},
+          annotate=annotate)
 
     # Solve for predicted flow
     eta = viscosity(T_pr)
     (a, L, precond) = momentum(W, eta, (Ra*T_pr)*g)
-    solve(a == L, w_pr, bcs, annotate=annotate)
+    #solve(a == L, w_pr, bcs, annotate=annotate)
+    A, b = assemble_system(a, L, bcs)
+    solver = KrylovSolver("tfqmr", "ilu")
+    solver.set_operators(A, P)
+    solver.set_nullspace(nullspace)
+    solver.set_transpose_nullspace(nullspace)
+    solver.solve(w_pr.vector(), b, annotate=annotate)
 
-    # Solve for corrected temperature T in terms of predicted and previous velocity
+    # Solve for corrected temperature T in terms of predicted and
+    # previous velocity
     (a, L) = energy_correction(Q, Constant(dt), u_pr, u_, T_)
-    solve(a == L, T, T_bcs, annotate=annotate, solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}})
+    solve(a == L, T, T_bcs,
+          annotate=annotate,
+          solver_parameters={"krylov_solver": {"relative_tolerance": 1.0e-14}})
 
     # Solve for corrected flow
     eta = viscosity(T)
     (a, L, precond) = momentum(W, eta, (Ra*T)*g)
-    solve(a == L, w, bcs, annotate=annotate)
+    A, b = assemble_system(a, L, bcs)
+    solver = KrylovSolver("tfqmr", "ilu")
+    solver.set_operators(A, P)
+    solver.set_nullspace(nullspace)
+    solver.set_transpose_nullspace(nullspace)
+    solver.solve(w.vector(), b, annotate=annotate)
 
     # Store stuff
     store(T, w, t)
@@ -188,16 +212,18 @@
   (ds2, Nu2) = Nusselt()
 
   #print "Replaying forward run ... "
-  #adj_html("forward.html", "forward")
-  #replay_dolfin(forget=False)
+  adj_html("forward.html", "forward")
+  replay_dolfin(forget=False)
 
   print "Running adjoint ... "
   adj_html("adjoint.html", "adjoint")
 
   J = Functional(-(1.0/Nu2)*grad(Tfinal)[1]*ds2*dt[FINISH_TIME])
   for (adjoint, var) in compute_adjoint(J, forget=False):
-    pass
+      print var
+    #pass
 
+  exit()
   def J(ic):
     Tfinal = main(ic)
     return assemble(-(1.0/Nu2)*grad(Tfinal)[1]*ds2)
@@ -205,7 +231,8 @@
   direction = Function(ic_copy)
   direction.vector()[:] = 1.0
 
-  minconv = test_initial_condition_adjoint(J, ic_copy, adjoint, seed=5.0e-1, perturbation_direction=direction)
+  minconv = test_initial_condition_adjoint(J, ic_copy, adjoint, seed=5.0e-1,
+                                           perturbation_direction=direction)
 
   if minconv < 1.8:
     sys.exit(1)

