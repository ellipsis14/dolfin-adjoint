#!/usr/bin/env python2

# Copyright (C) 2008 Johan Hake
# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2008 Johan Hake from dolfin-adjoint file tests/upwind/upwind.py,
# bzr trunk revision 638
# Code first added: 2012-11-26

from dolfin import *
from timestepping import *

Constant = StaticConstant

u_mag = Constant(1.0)
T_bc = Constant(1.0)
ngrid = 32
dt = Constant(0.5 * float(u_mag) / ngrid)

mesh = UnitIntervalMesh(ngrid)
space = FunctionSpace(mesh, "DG", 1)
test, trial = TestFunction(space), TrialFunction(space)

levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
T = TimeFunction(levels, space, name = "T")

u = StaticFunction(space, name = "u")
u.assign(Constant(u_mag))
U = as_vector([u])

system = TimeSystem()

T_ic = Constant(0.0)
system.add_solve(T_ic, T[0])

nm = FacetNormal(mesh)
# DG advection upwinding based on dolfin-adjoint upwind test
Un = 0.5 * (dot(U, nm) + abs(dot(U, nm)))
Un2 = 0.5 * (dot(U, nm) - abs(dot(U, nm)))
Th = 0.5 * (T[n] + T[n + 1])

class DirichletBCBoundary(SubDomain):
  def inside(self, x, on_boundary):
    return on_boundary and (near(x[0], 0.0) or near(x[0], 1.0))
bcs = MeshFunction("size_t", mesh, 0)
bcs.set_all(0)
DirichletBCBoundary().mark(bcs, 1)

# DG advection upwinding based on dolfin-adjoint upwind test
system.add_solve(inner(test, (T[n + 1] - T[n]) / dt) * dx - inner(grad(test), U * Th) * dx
  + jump(test) * jump(Un * Th) * dS
  + test * (Un * Th + Un2 * T_bc) * ds[bcs](1)
  + test * Un * Th * ds[bcs](0) == 0, T[n + 1], solver_parameters = {"linear_solver":"lu"})

system = system.assemble(adjoint = True, functional = T[N] * T[N] * dx)

t = 0.0
#index = 0
while t * (1.0 + 1.0e-9) < 1.0:
  system.timestep()
  t += float(dt)
#  index += 1
#  write_vtu("advection_1d_cn", T[n], index = index, t = t)

system.finalise()

system.verify_checkpoints()

J = system.compute_functional()
g = system.compute_gradient([T_ic, T_bc])
print(float(g[0]), float(g[1]))

orders = system.taylor_test(T_ic, J = J, grad = g[0])
assert((orders > 1.99).all())

orders = system.taylor_test(T_bc, J = J, grad = g[1])
assert((orders > 1.99).all())
