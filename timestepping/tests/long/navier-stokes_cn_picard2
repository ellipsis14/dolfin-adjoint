#!/usr/bin/env python

# Copyright (C) 2007 Kristian B. Oelgaard
# Copyright (C) 2008 Johan Hake
# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2007 Kristian B. Oelgaard from DOLFIN file
# demo/undocumented/dg-poisson/python/demo_dg-poisson.py, bzr trunk 7478
# Code first added: 2013-01-04

# Copyright (C) 2008 Johan Hake from dolfin-adjoint file tests/upwind/upwind.py,
# bzr trunk revision 638
# Code first added: 2012-11-26

"""
This is a P1_DG-P2 discretisation of the incompressible Navier-Stokes equations.
The temporal discretisation largely follows Ford et al, MWR, 2004,
pp. 2816 - 2831 (except for the initial pressure solve -- see code comment). The
advection discretisation utilises face averaging, rather than face upwinding, as
the latter is not differentiable. The viscous discretisation utilises an
interior penalty method based on DOLFIN demo demo_dg-poisson.py (see e.g.
DOLFIN bzr trunk 7436).
"""

from dolfin import *
from timestepping import *

from fractions import Fraction;  hf = Fraction(1, 2)
import numpy
import os

Constant = StaticConstant

# Model parameters
ngrid = 100  # Approximate number of divisions in the quasi-uniform mesh
cfl = 1.0    # Courant number, used to determine ...
dt = Constant(cfl / float(ngrid))  # ... the model timestep
alpha = Constant(10.0)  # Interior penalty parameter
Re = 1000.0  # Reynolds' number, used to determine ...
nu = Constant(1.0 / Re)  #  ... the viscosity
T = 1.0#300.0  # Final model time

# Linear solvers
lu_solver = {"linear_solver":"lu"}
dTdt_solver = {"linear_solver":"bicgstab", "preconditioner":"ilu", "krylov_solver":{"relative_tolerance":1.0e-12, "absolute_tolerance":1.0e-16, "divergence_limit":1.0e8}}

# The model mesh ...
mesh = Mesh(os.path.join(os.path.abspath(os.path.dirname(__file__)), "data", "square_100.xml.gz"))
nm = FacetNormal(mesh)
h = CellSize(mesh)
# ... and function spaces
space_u = FunctionSpace(mesh, "DG", 1)
space_p = FunctionSpace(mesh, "CG", 2)
test_u, trial_u = TestFunction(space_u), TrialFunction(space_u)
test_p, trial_p = TestFunction(space_p), TrialFunction(space_p)

# Model time levels and fields
it_levels = TimeLevels(levels = [n, n + hf, n + 1], cycle_map = {n:n + 1})
u_s        = TimeFunction(it_levels, space_u, name = "u_s")        # Intermediate divergent velocity
v_s        = TimeFunction(it_levels, space_u, name = "v_s")
u          = TimeFunction(it_levels, space_u, name = "u")          # Non-divergent velocity
v          = TimeFunction(it_levels, space_u, name = "v")
dudt_s     = TimeFunction(it_levels, space_u, name = "dudt_s")     # Intermediate divergent velocity tendency
dvdt_s     = TimeFunction(it_levels, space_u, name = "dvdt_s")
dp         = TimeFunction(it_levels, space_p, name = "dp")         # Pressure increment
grad_dp_x  = TimeFunction(it_levels, space_u, name = "grad_dp_x")  # Pressure increment gradient
grad_dp_y  = TimeFunction(it_levels, space_u, name = "grad_dp_y")
p          = TimeFunction(it_levels, space_p, name = "p")          # Pressure
div_U      = Function(space_p, name = "div_U")                     # Velocity divergence
psi        = Function(space_p, name = "psi")                       # Stream function

# A P1 field satisfying the x-velocity boundary condition. A Galerkin projection
# of this field is used for the divergent initial condition.
u_ic_space = FunctionSpace(mesh, "CG", 1)
test_u_ic, trial_u_ic = TestFunction(u_ic_space), TrialFunction(u_ic_space)
u_ic = StaticFunction(u_ic_space, name = "u_ic")
bc = DirichletBC(u_ic_space, -1.0, "on_boundary && x[1] > 1.0 - DOLFIN_EPS")
pa_solve(inner(test_u_ic, u_ic) * dx == inner(test_u_ic, Constant(0.0)) * dx,
  u_ic, bc, solver_parameters = lu_solver)

# x-velocity boundary condition. Specifying this to be a field enables the
# derivative to be computed for each point on the boundary.
u_bc = StaticFunction(space_u, name = "u_bc")
u_bc.assign(Constant(-1.0))

# Mark the upper boundary, on which the boundary condition is to be applied
class DirichletBCBoundary(SubDomain):
  def inside(self, x, on_boundary):
    return on_boundary and near(x[1], 1.0)
bcs = MeshFunction("size_t", mesh, 1)
bcs.set_all(0)
DirichletBCBoundary().mark(bcs, 1)
bc_ids = [0, 1]

# A DG advection-diffusion solve subject to weak (by default homogeneous)
# Dirichlet boundary conditions
def add_dTdt_solve(T, dTdt, u, v, kappa, s = None, bc = {}, initial_guess = None):
  U = as_vector([u, v])
#  # DG advection upwinding based on dolfin-adjoint upwind test
#  Un = 0.5 * (dot(U, nm) + abs(dot(U, nm)))
  L = (
      # Advection term
      
      inner(grad(test_u), U * T) * dx
#      # Face upwinding
#    - inner(jump(test_u), jump(Un * T)) * dS
      # Face averaging
    - inner(jump(test_u), dot(as_vector([avg(u * T), avg(v * T)]), nm("+"))) * dS
      ) \
    + (
      # Viscous term, using an interior penalty Laplace operator based on DOLFIN
      # demo demo_dg-poisson.py. See Oelgaard et al, SIAM J. Sci. Comput., 2008,
      # pp. 849 - 864 and Arnold et al, SIAM J. Numer. Anal., 2002,
      # pp. 1749 - 1779.
    
    - kappa      * inner(grad(test_u), grad(T)) * dx
    + avg(kappa) * inner(avg(grad(test_u)), jump(T, nm)) * dS
    + avg(kappa) * inner(jump(test_u, nm), avg(grad(T))) * dS
    - avg(kappa) * (avg(alpha) / avg(h)) * inner(jump(test_u, nm), jump(T, nm)) * dS
      )

  for id in bc_ids:
    L += (
         # Viscous term

         kappa      * inner(grad(test_u), T * nm) * ds[bcs](id)
       + kappa      * inner(test_u * nm, grad(T)) * ds[bcs](id)
       - kappa      * (alpha / h) * inner(test_u, T) * ds[bcs](id)
         )

  for id in bc:
    L += (
         # Viscous term weak Dirichlet boundary conditions
    
       - kappa * bc[id] * inner(grad(test_u), nm) * ds[bcs](id)
       + kappa * (alpha / h) * inner(test_u, bc[id]) * ds[bcs](id)
         )

  if not s is None:
    L += (
         # Source
         
         inner(test_u, s) * dx
         )
         
  ver = petsc_version()
  if not ver is None and ver >= (3, 2, 0):
    pre_assembly_parameters = {"bilinear_forms":{"term_optimisation":True, "expand_form":True}}
  else:
    pre_assembly_parameters = {"bilinear_forms":{"term_optimisation":False}}
  system.add_solve(inner(test_u, dTdt) * dx == L, dTdt,
    solver_parameters = dTdt_solver, initial_guess = initial_guess,
    pre_assembly_parameters = pre_assembly_parameters)
      
  return

# Single point boundary condition, used to apply a reference node to pressure
# solves
cell = mesh.closest_cell(Point(0.5, 0.5))
mesh_coords = mesh.coordinates()
cells = mesh.cells()[cell]
node = cells[0]
r = numpy.sqrt((mesh_coords[node, 0] - 0.5) ** 2 + (mesh_coords[node, 1] - 0.5) ** 2)
for lnode in cells[1:]:
  lr = numpy.sqrt((mesh_coords[lnode, 0] - 0.5) ** 2 + (mesh_coords[lnode, 1] - 0.5) ** 2)
  if lr < r:
    node = lnode
    r = lr
p0_coord = mesh_coords[node, :]
ref_bc = StaticDirichletBC(space_p, 0.0, "fabs(x[0] - %.17e) < DOLFIN_EPS && fabs(x[1] - %.17e) < DOLFIN_EPS" % (p0_coord[0], p0_coord[1]), method = "pointwise")
del(mesh_coords)

# Given a divergent velocity, compute the pressure increment and non-divergent
# velocity
def add_dp_solve(u_s, v_s, dp, grad_dp_x, grad_dp_y, u, v):
  U_s = as_vector([u_s, v_s])
  system.add_solve(inner(grad(test_p), grad(dp)) * dx ==
    (1.0 / dt) * inner(grad(test_p), U_s) * dx,
    dp, ref_bc, solver_parameters = lu_solver)
  system.add_solve(inner(test_u, grad_dp_x) * dx ==
    inner(test_u, grad(dp)[0]) * dx,
    grad_dp_x, solver_parameters = lu_solver)
  system.add_solve(inner(test_u, grad_dp_y) * dx ==
    inner(test_u, grad(dp)[1]) * dx,
    grad_dp_y, solver_parameters = lu_solver)
  system.add_solve(LinearCombination((1.0, u_s), (-dt, grad_dp_x)), u)
  system.add_solve(LinearCombination((1.0, v_s), (-dt, grad_dp_y)), v)
  
  return

system = TimeSystem()

# Divergent initial condition
system.add_solve(inner(test_u, u_s[0]) * dx ==
  inner(test_u, u_ic) * dx,
  u_s[0], solver_parameters = lu_solver)
system.add_solve(0.0, v_s[0])
# Projected, non-divergent, initial condition. Note that dp[0], grad_dp_x[0],
# and grad_dp_y[0] are used as working memory here.
add_dp_solve(u_s[0], v_s[0], dp[0], grad_dp_x[0], grad_dp_y[0], u[0], v[0])
# Initial pressure solve. In the notation of Ford et al, MWR, 2004,
# pp. 2816 - 2831, this sets p_-1/2 = p_0. This approach is extremely similar*
# to that described in Ford et al -- since the initial velocity is
# non-divergent, this is exactly equation (32) on the first iterate.
# This is also how Fluidity handles the initialisation (C J Cotter, personal
# comm., 01/2013), provided that the initial velocity is non-divergent.
#   * Perhaps identical. Ford et al is a little unclear as to how the
#     projection step is handled after the single iteration of the implicit
#     pressure solver.
add_dTdt_solve(u[0], dudt_s[0], u[0], v[0], nu, bc = {1:u_bc})
add_dTdt_solve(v[0], dvdt_s[0], u[0], v[0], nu)
system.add_solve(inner(grad(test_p), grad(p[0])) * dx ==
  inner(grad(test_p), as_vector([dudt_s[0], dvdt_s[0]])) * dx,
  p[0], ref_bc, solver_parameters = lu_solver)

# Timestep iteration 1
add_dTdt_solve(u[n] + 0.5 * dt * dudt_s[n + hf], dudt_s[n + hf], u[n], v[n], nu, s = -grad(p[n])[0], bc = {1:u_bc}, initial_guess = dudt_s[n])
add_dTdt_solve(v[n] + 0.5 * dt * dvdt_s[n + hf], dvdt_s[n + hf], u[n], v[n], nu, s = -grad(p[n])[1], initial_guess = dvdt_s[n])
system.add_solve(LinearCombination((1.0, u[n]), (dt, dudt_s[n + hf])), u_s[n + hf])
system.add_solve(LinearCombination((1.0, v[n]), (dt, dvdt_s[n + hf])), v_s[n + hf])
add_dp_solve(u_s[n + hf], v_s[n + hf], dp[n + hf], grad_dp_x[n + hf], grad_dp_y[n + hf], u[n + hf], v[n + hf])
system.add_solve(LinearCombination((1.0, p[n]), (1.0, dp[n + hf])), p[n + hf])

# Timestep iteration 2
# Ford et al, MWR, 2004, pp. 2816 - 2831 is unclear at to how the pressure is
# handled on the second iteration, but I believe this is what was intended.
# This is also how Fluidity handles this step (C J Cotter, personal comm.,
# 01/2013).
add_dTdt_solve(u[n] + 0.5 * dt * dudt_s[n + 1], dudt_s[n + 1], 0.5 * (u[n] + u[n + hf]), 0.5 * (v[n] + v[n + hf]), nu, s = -grad(p[n + hf])[0], bc = {1:u_bc}, initial_guess = dudt_s[n + hf])
add_dTdt_solve(v[n] + 0.5 * dt * dvdt_s[n + 1], dvdt_s[n + 1], 0.5 * (u[n] + u[n + hf]), 0.5 * (v[n] + v[n + hf]), nu, s = -grad(p[n + hf])[1], initial_guess = dvdt_s[n + hf])
system.add_solve(LinearCombination((1.0, u[n]), (dt, dudt_s[n + 1])), u_s[n + 1])
system.add_solve(LinearCombination((1.0, v[n]), (dt, dvdt_s[n + 1])), v_s[n + 1])
add_dp_solve(u_s[n + 1], v_s[n + 1], dp[n + 1], grad_dp_x[n + 1], grad_dp_y[n + 1], u[n + 1], v[n + 1])
system.add_solve(LinearCombination((1.0, p[n + hf]), (1.0, dp[n + 1])), p[n + 1])

# Diagnostics
div_U_solver = PAEquationSolver(inner(test_p, div_U) * dx ==
  -inner(grad(test_p), as_vector([u[n], v[n]])) * dx,
  div_U, solver_parameters = lu_solver)
psi_solver = PAEquationSolver(inner(grad(test_p), grad(psi)) * dx ==
  inner(grad(test_p), as_vector([-v[n], u[n]])) * dx,
  psi, StaticDirichletBC(space_p, 0.0, "on_boundary"), solver_parameters = lu_solver)
def diagnostics(t):
  div_U_solver.solve()
  psi_solver.solve()
  dudt_norm = (dudt_s[n].vector() - grad_dp_x[n].vector()).norm("linf"), \
              (dvdt_s[n].vector() - grad_dp_y[n].vector()).norm("linf")
  u_norm = u[n].vector().norm("linf"), v[n].vector().norm("linf")
  if 0.0 in [u_norm[0], u_norm[1]]:
    eps = numpy.NAN
  else:
    eps = max(dudt_norm[0] / u_norm[0], dudt_norm[1] / u_norm[1])
  div_U_norm = div_U.vector().norm("linf")
  psi_range = psi.vector().array().min(), psi.vector().array().max()
  if div_U_norm > 7.0e-11:
    linfo = info_red
  else:
    linfo = info
  linfo("Time, ||u||_inf, ||v||_inf, eps, ||div U||_inf, min(psi), max(psi) = %.2f, %.17e, %.17e, %.7e, %.17e, %.17e, %.17e"
    % (t, u_norm[0], u_norm[1], eps, div_U_norm, psi_range[0], psi_range[1]))
  return
def update(s, cs = None):
  if s > 0:
    t = float(dt) * (s - 1)
    dolfin.info("Time = %.2f" % t)
  return
system.set_update(update)

# Assemble and run the forward model
system = system.assemble(adjoint = True, disk_period = 10, functional = 0.5 * (u[N] * u[N] + v[N] * v[N]) * dx)

t = 0.0
diagnostics(t)
#index = 0
#write_vtu("navier-stokes_cn_picard2", [u[n], v[n], p[n], psi], index = index, t = t)
#s = 0
#s_disk = int((50.0 / float(dt)) * (1.0 + 1.0e-6))
while t * (1.0 + 1.0e-6) < T:
  system.timestep()
  t += float(dt)
  diagnostics(t)
#  s += 1
#  if s % s_disk == 0:
#    index += 1
#    write_vtu("navier-stokes_cn_picard2", [u[n], v[n], p[n], psi], index = index, t = t)
system.finalise()

# Verify incompressibility
err = div_U.vector().norm("linf")
print "%.17e" % err
assert(err < 7.0e-11)

# Verify pressure zero point
p0 = numpy.empty(1);  p0[:] = numpy.NAN
p[N].eval(p0, numpy.array(p0_coord, dtype = numpy.float_))
print "%.17e" % abs(p0)
assert(abs(p0) < 1.0e-16)

## Verify the solution. Reference value from Botella and Peyret, Computers &
## Fluids, 1998, 421 - 433, table 6.
#ref = 0.1189366
#comp = psi.vector().max()
#err = abs(ref - comp)
#print "%.17e" % comp
#print "%.17e" % ref
#print "%.17e" % err

## Verify the solution. Reference value from Botella and Peyret, Computers &
## Fluids, 1998, 421 - 433, table 12.
#ref = -1.729717e-3
#comp = psi.vector().min()
#err = abs(ref - comp)
#print "%.17e" % comp
#print "%.17e" % ref
#print "%.17e" % err

# Verify the checkpoints
system.verify_checkpoints()

# Run the adjoint model
g = system.compute_gradient(u_bc)

## Output the derivative
#p0_space = FunctionSpace(mesh, "DG", 0)
#p0_field = Function(p0_space)
#arr = numpy.array([float(i) for i in range(*p0_field.vector().local_range(0))])
#p0_field.vector().set_local(arr)
#p0_field.vector().apply("insert")
#cell_field = Function(space_u)
#pa_solve(inner(test_u, cell_field) * dx == inner(test_u, p0_field) * dx,
#  cell_field, solver_parameters = lu_solver)
#cells = cell_field.vector().array()
#x_coords = interpolate(Expression("x[0]"), space_u).vector().array()
#y_coords = interpolate(Expression("x[1]"), space_u).vector().array()
#vals = g.array()
#p = [[[], []] for i in range(len(cells))]
#for i in range(len(x_coords)):
#  if abs(y_coords[i] - 1.0) < 1.0e-6:
#    c = p[int(cells[i] * (1.0 + 1.0e-6))]
#    c[0].append(x_coords[i])
#    c[1].append(vals[i])
#from matplotlib.pylab import plot, savefig
#handle = open("g.dat", "w")
#for c in p:
#  if len(c[0]) > 1:
#    assert(len(c[0]) == 2 and len(c[1]) == 2)
#    if c[0][0] > c[0][1]:
#      c[0] = c[0][1], c[0][0]
#      c[1] = c[1][1], c[1][0]    
#    mesh_1 = IntervalMesh(1, c[0][0], c[0][1])
#    space_u_1 = FunctionSpace(mesh_1, "DG", 1)
#    x_1 = interpolate(Expression("x[0]"), space_u_1).vector().array()
#    assert(x_1[0] == c[0][0] and x_1[1] == c[0][1])
#    mass_1 = assemble(inner(TestFunction(space_u_1), TrialFunction(space_u_1)) * dx).array()
#    c[1] = numpy.linalg.solve(mass_1, c[1])
#    handle.write("%.17e %.17e %.17e %.17e\n" % (c[0][0], c[1][0], c[0][1], c[1][1]))
#    plot(c[0], c[1], color = "k")
#handle.close()
#savefig("g.png")

# Verify the derivative
J = system.compute_functional()
print "J = %.17e" % J
orders = system.taylor_test(u_bc, J = J, grad = g, ntest = 2)
assert((orders > 2.00).all())
