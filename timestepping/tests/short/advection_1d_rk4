#!/usr/bin/env python2

# Copyright (C) 2008 Johan Hake
# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2008 Johan Hake from dolfin-adjoint file tests/upwind/upwind.py,
# bzr trunk revision 638
# Code first added: 2012-11-26

from dolfin import *
from timestepping import *

from fractions import Fraction
f1 = Fraction(1, 4);  f2 = Fraction(1, 2);  f3 = Fraction(3, 4)

Constant = StaticConstant

if "reorder_dofs_serial" in parameters:
  parameters["reorder_dofs_serial"] = False

u_mag = Constant(1.0)
T_bc = Constant(1.0)
ngrid = 32
dt = Constant(0.25 * float(u_mag) / ngrid)
lu_solver = {"linear_solver":"lu"}

mesh = UnitIntervalMesh(ngrid)
nm = FacetNormal(mesh)
space = FunctionSpace(mesh, "DG", 1)
test, trial = TestFunction(space), TrialFunction(space)

levels    = TimeLevels(levels = [n, n + f1, n + f2, n + f3, n + 1], cycle_map = {n:n + 1})
levels_dT = TimeLevels(levels = [n, n + f1, n + f2, n + f3], cycle_map = {}, last_past_level = n - f1)
T  = TimeFunction(levels,    space, name = "T")
dT = TimeFunction(levels_dT, space, name = "dT")

u_n = Function(space, name = "u_n")
u_nphf = Function(space, name = "u_nphf")
u_np1 = Function(space, name = "u_np1")

system = TimeSystem()

system.add_solve(0.0, T[0])

class DirichletBCBoundary(SubDomain):
  def inside(self, x, on_boundary):
    return on_boundary and (near(x[0], 0.0) or near(x[0], 1.0))
bcs = MeshFunction("size_t", mesh, 0)
bcs.set_all(0)
DirichletBCBoundary().mark(bcs, 1)

# DG advection upwinding based on dolfin-adjoint upwind test
def add_dT_solve(n, u):
  U = as_vector([u])
  Un = 0.5 * (dot(U, nm) + abs(dot(U, nm)))
  Un2 = 0.5 * (dot(U, nm) - abs(dot(U, nm)))
  system.add_solve(inner(test, trial) * dx == - (- dt * inner(grad(test), U * T[n]) * dx
    + jump(test) * jump(dt * Un * T[n]) * dS
    + dt * test * (Un * T[n] + Un2 * T_bc) * ds[bcs](1)
    + dt * test * Un * T[n] * ds[bcs](0)), dT[n], solver_parameters = lu_solver)
  return

add_dT_solve(n, u_n)
add_dT_solve(n + f1, u_nphf)
add_dT_solve(n + f2, u_nphf)
add_dT_solve(n + f3, u_np1)

system.add_solve(LinearCombination((1.0, T[n]),
                                   (0.5, dT[n])), T[n + f1])
system.add_solve(LinearCombination((1.0, T[n]),
                                   (0.5, dT[n + f1])), T[n + f2])
system.add_solve(LinearCombination((1.0, T[n]),
                                   (1.0, dT[n + f2])), T[n + f3])
system.add_solve(LinearCombination((1.0, T[n]),
                                   ((1.0 / 6.0), dT[n     ]),
                                   ((1.0 / 3.0), dT[n + f1]),
                                   ((1.0 / 3.0), dT[n + f2]),
                                   ((1.0 / 6.0), dT[n + f3])), T[n + 1])

def u_update(s, cs = None):
  t = float(dt) * max(s - 1, 0)
  assert(t * (1.0 - 1.0e-9) < 1.0)
  if cs is None or u_n in cs:
    u_n.assign(Constant(t * float(u_mag)))
  if cs is None or u_nphf in cs:
    u_nphf.assign(Constant((t + 0.5 * float(dt)) * float(u_mag)))
  if cs is None or u_np1 in cs:
    u_np1.assign(Constant((t + float(dt)) * float(u_mag)))
  return
system.set_update(u_update)

system = system.assemble(adjoint = True, functional = T[N] * T[N] * dx)

t = 0.0
#index = 0
while t * (1.0 + 1.0e-9) < 1.0:
  system.timestep()
  t += float(dt)
#  index += 1
#  write_vtu("advection_1d_rk4", T[n], index = index, t = t)

system.finalise()

system.verify_checkpoints()

J = system.compute_functional()
g = system.compute_gradient(T_bc)
print(float(g))

orders = system.taylor_test(T_bc, J = J, grad = g)
assert((orders > 1.99).all())
