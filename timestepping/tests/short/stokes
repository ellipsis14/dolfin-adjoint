#!/usr/bin/env python

# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Modified version of stokes.py test from dolfin-adjoint bzr trunk 513
# Code first added: 2013-02-09

"""
Very stupid scheme for decoupled stationary Stokes + heat equation:

Given nu and f, find (u, p) such that

  (nu grad(u), grad(v)) + (p, div(v)) = (f, v)
                          (div(u), q) = 0

for all (v, q).

Given velocity u, find T such that

  (Dt(T), s) + (s*div(v) + (grad(T), grad(s)) = (1, s)

for all s

"""

from dolfin import *
from timestepping import *

import numpy

if "reorder_dofs_serial" in parameters:
  parameters["reorder_dofs_serial"] = False

def stokes(W, nu, f):
    (u, p) = TrialFunctions(W)
    (v, q) = TestFunctions(W)
    a = (nu*inner(grad(u), grad(v)) +
         p*div(v) + q*div(u))*dx
    L = inner(f, v)*dx
    return (a, L)

def temperature(X, kappa, v, t_, k):
    t = TrialFunction(X)
    s = TestFunction(X)

    F = ((t - t_)/k*s + inner(kappa*grad(t), grad(s))
         + dot(v, grad(t))*s)*dx - s*dx
    (a, L) = lhs(F), rhs(F)
    return (a, L)

def flow_boundary_conditions(W):
    u0 = StaticConstant((0.0,0.0))
    bottom = StaticDirichletBC(W.sub(0), (0.0, 0.0), "near(x[1], 0.0)")
    top = StaticDirichletBC(W.sub(0), (0.0, 0.0), "near(x[1], 1.0)")
    left = StaticDirichletBC(W.sub(0).sub(0), 0.0, "near(x[0], 0.0)")
    right = StaticDirichletBC(W.sub(0).sub(0), 0.0, "near(x[0], 1.0)")
    bcs = [bottom, top, left, right]
    return bcs

def temperature_boundary_conditions(Q):
    bc = StaticDirichletBC(Q, 0.0, "near(x[1], 1.0)")
    return [bc]

ngrid = 16
mesh = UnitSquareMesh(ngrid, ngrid)
X = FunctionSpace(mesh, "CG", 1)

T0_expr = "0.5*(1.0 - x[1]*x[1]) + 0.01*cos(pi*x[0]/l)*sin(pi*x[1]/h)"
T0 = Expression(T0_expr, l=1.0, h=1.0)
ic = StaticFunction(X, name = "ic")
ic.interpolate(T0)

# Define meshes and function spaces
V = VectorFunctionSpace(mesh, "CG", 2)
Q = FunctionSpace(mesh, "CG", 1)
W = V * Q

# Define boundary conditions
flow_bcs = flow_boundary_conditions(W)
temp_bcs = temperature_boundary_conditions(X)

# Temperature variables
T = TimeFunction(TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1}), X, name = "T")
system = TimeSystem()
system.add_solve(ic, T[0])

# Flow variable(s)
w = TimeFunction(TimeLevels(levels = [n], cycle_map = {}, last_past_level = n - 1), W, name = "w")
(u, p) = split(w[n])

# Some parameters
Ra = StaticConstant(1.e4)
nu = StaticConstant(1.0)
kappa = StaticConstant(1.0)
timestep = 0.1

# Define flow equation
g = as_vector((Ra*T[n], 0))
flow_eq = stokes(W, nu, g)
system.add_solve(flow_eq[0] == flow_eq[1], w[n], flow_bcs)

# Define temperature equation
temp_eq = temperature(X, kappa, u, T[n], timestep)
system.add_solve(temp_eq[0] == temp_eq[1], T[n + 1], temp_bcs)

# Time loop
system = system.assemble(adjoint = True)
t = 0.0
end = 1.0
while (t <= end):
    system.timestep()
    #plot(T[n])
    t += timestep
system.finalise()

dolfin_adjoint_solution = numpy.array(map(float, """0.22997968  0.23028553  0.23196176  0.23485117  0.23888917  0.24404033
  0.25027879  0.25757309  0.26586403  0.27503164  0.28485241  0.29495487
  0.30479096  0.31364708  0.32071436  0.32521112  0.32649087  0.22708234
  0.22767692  0.22948368  0.23247294  0.23660139  0.24183554  0.24815118
  0.25552275  0.26390228  0.27318552  0.283166    0.29348428  0.30359076
  0.31274986  0.32011318  0.32487037  0.32646078  0.21951697  0.22033042
  0.22249158  0.22591358  0.23050182  0.23618382  0.24291422  0.25066543
  0.25940515  0.26905906  0.27945725  0.29027029  0.3009537   0.31073538
  0.31868582  0.32388963  0.32568556  0.2081841   0.20924926  0.2120083
  0.21625167  0.22176083  0.22836511  0.23595587  0.24447689  0.2538976
  0.26416922  0.27516187  0.28658616  0.29791733  0.30836194  0.31691881
  0.32256516  0.32453143  0.19464746  0.19598503  0.19951913  0.20488222
  0.21168211  0.21960079  0.22842609  0.23804365  0.24840419  0.25947123
  0.27114862  0.28318942  0.29510271  0.3061      0.31514295  0.32113583
  0.32323108  0.18046059  0.18208663  0.18650501  0.19317176  0.20149151
  0.21096696  0.22125493  0.23216165  0.24360259  0.25554021  0.26790235
  0.28048196  0.2928319   0.3041954   0.31353838  0.31973892  0.32191037
  0.16661981  0.16856272  0.17394334  0.1820276   0.19199532  0.20314938
  0.21500087  0.2272669   0.23982003  0.25261363  0.26559133  0.2785816
  0.29118709  0.30270502  0.31214445  0.31840309  0.3205926   0.15343551
  0.15572897  0.16213232  0.17170692  0.18338858  0.19626651  0.20970071
  0.22331934  0.23695257  0.25054224  0.26404223  0.27731128  0.29000355
  0.30148573  0.3108406   0.31702347  0.31917421  0.1407253   0.14338453
  0.15082495  0.16189422  0.17527427  0.1898384   0.20480132  0.21971106
  0.23436186  0.24868466  0.26263829  0.27610354  0.28878085  0.30011066
  0.30926622  0.31528347  0.31734675  0.12807811  0.13107366  0.13946257
  0.15188709  0.16678952  0.18284872  0.19915844  0.21520747  0.23076679
  0.24575932  0.26014264  0.27380668  0.28648253  0.29767145  0.30663058
  0.31247319  0.31441845  0.11503217  0.1182679   0.12735098  0.14075605
  0.15673811  0.17383833  0.19107991  0.2079294   0.22415653  0.23968498
  0.25446858  0.26839365  0.28119902  0.2924147   0.3013422   0.30712485
  0.30895992  0.10114166  0.10444065  0.11375058  0.12745436  0.14371865
  0.16104265  0.17845448  0.1954494   0.211827    0.22752986  0.24251805
  0.25667554  0.26973628  0.28122422  0.29042044  0.29639861  0.29820841
  0.08596498  0.08907089  0.09792158  0.11092589  0.12630746  0.14265013
  0.15907393  0.17515356  0.19074711  0.2058371   0.22041206  0.23437907
  0.24748962  0.25926638  0.26893402  0.2753941   0.27738236  0.06900473
  0.07161109  0.07916618  0.09025898  0.10334941  0.11724362  0.1312301
  0.14499278  0.15845515  0.17164326  0.18458706  0.19724683  0.20944343
  0.22077131  0.23047979  0.23734748  0.23976504  0.0496141   0.0514339
  0.05687524  0.06487711  0.07431657  0.08434231  0.09446053  0.10446542
  0.11432463  0.12408152  0.13378665  0.14344709  0.15297584  0.16211877
  0.17033077  0.17658924  0.17933398  0.02691247  0.02778923  0.03056719
  0.03467691  0.03953972  0.04472009  0.04996518  0.05517014  0.06032064
  0.06544337  0.07057121  0.07571771  0.08085215  0.08586287  0.09049698
  0.09426804  0.09635563  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.        """.split()))
err = abs(T[N].vector().array() - dolfin_adjoint_solution).max()
print err
assert(err < 5.0e-9)

system.set_functional(T[N] * T[N] * dx)
dJdm = system.compute_gradient(ic)
dolfin_adjoint_grad = numpy.array(map(float, """2.86666005e-06   4.17839553e-06   3.99866829e-06   3.84795823e-06
   3.75550725e-06   3.71831284e-06   3.71936543e-06   3.74206042e-06
   3.77550973e-06   3.81420542e-06   3.85612038e-06   3.90124771e-06
   3.95072794e-06   4.00557413e-06   4.06355276e-06   4.11411873e-06
   1.37912225e-06   4.25156432e-06   8.26654189e-06   7.85947371e-06
   7.56147604e-06   7.43206629e-06   7.43538740e-06   7.50431461e-06
   7.58555776e-06   7.65219805e-06   7.69810887e-06   7.72895905e-06
   7.75644664e-06   7.79587967e-06   7.86341612e-06   7.96772814e-06
   8.09526960e-06   4.09987787e-06   4.20796907e-06   8.21849872e-06
   7.83702608e-06   7.55735293e-06   7.45424102e-06   7.48255653e-06
   7.56125269e-06   7.63003682e-06   7.66299365e-06   7.65993640e-06
   7.63434764e-06   7.60577031e-06   7.59669085e-06   7.62988442e-06
   7.72007845e-06   7.85677921e-06   3.99737424e-06   4.18414665e-06
   8.29524188e-06   8.03431128e-06   7.79137910e-06   7.66360008e-06
   7.62767318e-06   7.62198777e-06   7.60260565e-06   7.55528156e-06
   7.48633595e-06   7.41137168e-06   7.34877240e-06   7.31791280e-06
   7.33872846e-06   7.42618292e-06   7.57341912e-06   3.86318334e-06
   4.16957317e-06   8.39811858e-06   8.27651572e-06   8.07450769e-06
   7.90467886e-06   7.77259702e-06   7.64739720e-06   7.51069954e-06
   7.36481212e-06   7.22328986e-06   7.10154690e-06   7.01301511e-06
   6.97068807e-06   6.99112904e-06   7.09306505e-06   7.27983444e-06
   3.73282224e-06   4.15545212e-06   8.45225687e-06   8.42481412e-06
   8.24451871e-06   8.02849651e-06   7.80474969e-06   7.56907710e-06
   7.32553086e-06   7.09078999e-06   6.88438947e-06   6.72092006e-06
   6.60879121e-06   6.55590306e-06   6.57977379e-06   6.71152838e-06
   6.97618522e-06   3.61853876e-06   4.13911234e-06   8.42606478e-06
   8.41401861e-06   8.21990786e-06   7.95740898e-06   7.66657412e-06
   7.35767510e-06   7.04535823e-06   6.75205655e-06   6.49917064e-06
   6.30039256e-06   6.16170717e-06   6.08998288e-06   6.10941282e-06
   6.27273251e-06   6.64006598e-06   3.50836973e-06   4.12242676e-06
   8.32100274e-06   8.23907809e-06   7.99102982e-06   7.68437591e-06
   7.36246929e-06   7.03547602e-06   6.71197707e-06   6.40646050e-06
   6.13457524e-06   5.90809846e-06   5.73453465e-06   5.62561411e-06
   5.61794371e-06   5.79321040e-06   6.25942925e-06   3.38515392e-06
   4.10953727e-06   8.15391589e-06   7.92590332e-06   7.59108570e-06
   7.25112292e-06   6.94527794e-06   6.66927221e-06   6.40789694e-06
   6.15147974e-06   5.89897484e-06   5.65635470e-06   5.43540498e-06
   5.25914433e-06   5.18275601e-06   5.32289794e-06   5.84673772e-06
   3.23924176e-06   4.10818403e-06   7.95614102e-06   7.52800647e-06
   7.09400553e-06   6.74948756e-06   6.52074998e-06   6.37573321e-06
   6.26049221e-06   6.12670188e-06   5.94434562e-06   5.70538992e-06
   5.42353993e-06   5.13658018e-06   4.92459638e-06   4.94606880e-06
   5.43760528e-06   3.06853403e-06   4.13440221e-06   7.79238682e-06
   7.15614541e-06   6.64862435e-06   6.35365515e-06   6.27286814e-06
   6.33684344e-06   6.44688271e-06   6.51018090e-06   6.45889449e-06
   6.25872641e-06   5.91279652e-06   5.46613134e-06   5.02432232e-06
   4.79500651e-06   5.09508458e-06   2.87616689e-06   4.20531296e-06
   7.77404718e-06   7.00932560e-06   6.51094047e-06   6.33978291e-06
   6.46407701e-06   6.78050590e-06   7.15809041e-06   7.47083609e-06
   7.61441399e-06   7.51552230e-06   7.14129280e-06   6.51405665e-06
   5.74293874e-06   5.07912942e-06   4.92791450e-06   2.67194596e-06
   4.27178755e-06   7.96758199e-06   7.29060614e-06   6.94550171e-06
   6.96442700e-06   7.29517266e-06   7.83117581e-06   8.44622985e-06
   9.01206876e-06   9.40393399e-06   9.50471091e-06   9.21559221e-06
   8.48240684e-06   7.35210502e-06   6.06434333e-06   5.09301566e-06
   2.47467100e-06   4.09823292e-06   8.09709846e-06   7.84779116e-06
   7.82345598e-06   8.04931613e-06   8.50455031e-06   9.13808730e-06
   9.87893153e-06   1.06352304e-05   1.12895014e-05   1.16948423e-05
   1.16770321e-05   1.10573273e-05   9.72320063e-06   7.77365935e-06
   5.65295728e-06   2.29592209e-06   3.31308961e-06   7.32547819e-06
   7.73693332e-06   8.09750271e-06   8.46061779e-06   8.89536518e-06
   9.45375588e-06   1.01492779e-05   1.09490103e-05   1.17705073e-05
   1.24742948e-05   1.28504380e-05   1.26151897e-05   1.14598423e-05
   9.22154996e-06   6.13333799e-06   2.07073205e-06   1.74066681e-06
   4.66788788e-06   5.40662760e-06   5.90128878e-06   6.21479341e-06
   6.47413592e-06   6.79301762e-06   7.23406028e-06   7.80772804e-06
   8.47948146e-06   9.16660969e-06   9.71859500e-06   9.88939080e-06
   9.33893685e-06   7.74300013e-06   5.03411828e-06   1.55585202e-06
   1.75282565e-07   8.46341495e-07   1.07340683e-06   1.22110270e-06
   1.29886385e-06   1.34414700e-06   1.39436755e-06   1.47207045e-06
   1.58512477e-06   1.73071261e-06   1.89645629e-06   2.05627943e-06
   2.16133179e-06   2.13225319e-06   1.87020244e-06   1.30294009e-06
   4.73464636e-07""".split()))
err = abs(dJdm.array() - dolfin_adjoint_grad).max()
print err
assert(err < 5.0e-14)

orders = system.taylor_test(ic, grad = dJdm, fact = 1.0e-3)
assert((orders > 1.98).all())